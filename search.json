[{"path":"https://tony2015116.github.io/tidypptsda/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Guo Meng Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tony2015116.github.io/tidypptsda/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Guo Meng Doe. Author, maintainer. Guo Meng. Copyright holder.","code":""},{"path":"https://tony2015116.github.io/tidypptsda/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Doe G (2025). tidypptsda: Learn Build Package Rmarkdown File. R package version 0.0.0.9000, https://tony2015116.github.io/tidypptsda/.","code":"@Manual{,   title = {tidypptsda: Learn How to Build a Package from Rmarkdown File},   author = {Guo Meng Doe},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://tony2015116.github.io/tidypptsda/}, }"},{"path":"https://tony2015116.github.io/tidypptsda/index.html","id":"tidypptsda-","dir":"","previous_headings":"","what":"Learn How to Build a Package from Rmarkdown File","title":"Learn How to Build a Package from Rmarkdown File","text":"goal tidypptsda …","code":""},{"path":"https://tony2015116.github.io/tidypptsda/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Learn How to Build a Package from Rmarkdown File","text":"can install development version tidypptsda GitHub :","code":"# install.packages(\"pak\") pak::pak(\"tony2015116/tidypptsda\")"},{"path":"https://tony2015116.github.io/tidypptsda/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Learn How to Build a Package from Rmarkdown File","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(tidypptsda) ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"https://tony2015116.github.io/tidypptsda/reference/preproces_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Preprocessing Pipeline — preproces_data","title":"Data Preprocessing Pipeline — preproces_data","text":"Comprehensive data preprocessing workflow Nedap/FIRE sensor data format conversion, data validation, quality control checks.","code":""},{"path":"https://tony2015116.github.io/tidypptsda/reference/preproces_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Preprocessing Pipeline — preproces_data","text":"","code":"preproces_data(data, station_type = \"nedap\", print_details = FALSE)"},{"path":"https://tony2015116.github.io/tidypptsda/reference/preproces_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Preprocessing Pipeline — preproces_data","text":"data [data.frame/data.table] Input dataset Must contain specific columns depending station_type Accepts data.frame data.table objects Automatically converts data.table internally station_type [character] Data source specification \"nedap\": Requires Nedap-specific columns Required columns: animal_number, lifenumber, responder, location, visit_time, duration, state, weight, feed_intake \"fire\": Requires FIRE system columns Required columns: Location, Tag, Date, Entry, Exit, Ent Wt, Ext Wt, Consumed, Weight, Topup Amount Default: \"nedap\" print_details [logical] Debugging output control TRUE: Show detailed duplicate responder information FALSE: Suppress detailed output (default)","code":""},{"path":"https://tony2015116.github.io/tidypptsda/reference/preproces_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Preprocessing Pipeline — preproces_data","text":"[data.table] Processed dataset enhanced structure: Standardized column names data types Added temporal sequences: - seq_days: Daily sequence counter - seq_in_day: Intra-day visit order - seq_in_location: Location-specific sequence Optimized key-based indexing : - responder, date, visit_time","code":""},{"path":[]},{"path":"https://tony2015116.github.io/tidypptsda/reference/preproces_data.html","id":"core-processing-workflow","dir":"Reference","previous_headings":"","what":"Core Processing Workflow","title":"Data Preprocessing Pipeline — preproces_data","text":"Input Validation Check dataset existence format Verify required column presence Auto-conversion data.table Format Standardization Convert FIRE data Nedap format (station_type = \"fire\") Standardize column names units Handle datetime conversions Data Cleaning Remove invalid records (NA responders, zero tags) Deduplicate records Resolve cross-location responder conflicts Feature Engineering Generate sequence numbers (daily/location-based) Create time-based indexes Add derived metrics","code":""},{"path":"https://tony2015116.github.io/tidypptsda/reference/preproces_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Data Preprocessing Pipeline — preproces_data","text":"Key Constraints: Critical columns must exist based station_type FIRE data conversion includes: - Unit conversions (kg → g) - DateTime standardization (UTC timezone) - Removal invalid Tag == \"0\" records Duplicate responder resolution selects location records","code":""},{"path":[]},{"path":"https://tony2015116.github.io/tidypptsda/reference/preproces_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Preprocessing Pipeline — preproces_data","text":"","code":"result_nedap <- preproces_data(data = mintyr::nedap, station_type = \"nedap\") #>  #> ── Pre-processing NEDAP Data ─────────────────────────────────────────────────── #> ℹ Validating input NEDAP data #> ℹ Created a copy of the input data.table #> ℹ Validating input NEDAP data #> ✔ Validating input NEDAP data ... done #>  #> ℹ Converting data variable types #> ✔ Converting data variable types ... done #>  #> ℹ Removed 211 duplicate records or NA responders #> ℹ Initial valid responders: 30 #> ℹ Checking for duplicated responders across locations #> ℹ No duplicated responders found #> ℹ Checking for duplicated responders across locations #> ✔ Checking for duplicated responders across locations ... done #>  #> ℹ Creating new dataset with sequence numbers #> ✔ Creating new dataset with sequence numbers ... done #>  #> ✔ Data pre-processing completed successfully head(result_nedap) #> Key: <responder, date, visit_time> #>    animal_number lifenumber responder location          visit_time duration #>            <int>     <lgcl>    <char>   <char>              <POSc>    <int> #> 1:      10113913         NA     13913      101 2024-02-19 22:21:41       75 #> 2:      10113913         NA     13913      101 2024-02-20 01:00:02      288 #> 3:      10113913         NA     13913      101 2024-02-20 01:05:04        4 #> 4:      10113913         NA     13913      101 2024-02-20 02:53:50      434 #> 5:      10113913         NA     13913      101 2024-02-20 04:27:26      228 #> 6:      10113913         NA     13913      101 2024-02-20 06:51:37        6 #>    state weight feed_intake       date     n seq_days seq_in_day #>    <int>  <int>       <int>     <Date> <int>    <int>      <int> #> 1:     0  23500           1 2024-02-19  1376        1          1 #> 2:     0  23500          39 2024-02-20  1376        2          1 #> 3:     0  31000           0 2024-02-20  1376        2          2 #> 4:     0  23500          64 2024-02-20  1376        2          3 #> 5:     0  24000          35 2024-02-20  1376        2          4 #> 6:     0      0           0 2024-02-20  1376        2          5 #>    seq_in_location #>              <int> #> 1:               1 #> 2:               1 #> 3:               2 #> 4:               3 #> 5:               4 #> 6:               5 result_fire <- preproces_data(data = mintyr::fire, station_type = \"fire\") #>  #> ── Pre-processing FIRE Data ──────────────────────────────────────────────────── #> ℹ Validating input FIRE data #> ℹ Created a copy of the input data.table #> ℹ Validating input FIRE data #> ✔ Validating input FIRE data ... done #>  #> ℹ Converting FIRE data to Nedap format #> ! Removed 51 rows where responder was [0] #> ℹ Converting FIRE data to Nedap format #> ✔ Converting FIRE data to Nedap format ... done #>  #> ℹ Converting data variable types #> ✔ Converting data variable types ... done #>  #> ℹ Initial valid responders: 26 #> ℹ Checking for duplicated responders across locations #> ℹ No duplicated responders found #> ℹ Checking for duplicated responders across locations #> ✔ Checking for duplicated responders across locations ... done #>  #> ℹ Creating new dataset with sequence numbers #> ✔ Creating new dataset with sequence numbers ... done #>  #> ✔ Data pre-processing completed successfully head(result_fire) #> Key: <responder, date, visit_time> #>    location responder          visit_time duration feed_intake entrancetime #>      <char>    <char>              <POSc>    <num>       <num>       <char> #> 1:      101     25822 2023-12-20 07:57:22       16           0     07:57:22 #> 2:      101     25822 2023-12-20 08:01:24       11           0     08:01:24 #> 3:      101     25822 2023-12-20 08:25:47       43          17     08:25:47 #> 4:      101     25822 2023-12-20 09:03:56      325         311     09:03:56 #> 5:      101     25822 2023-12-20 09:22:42      797         293     09:22:42 #> 6:      101     25822 2023-12-20 09:44:06        6           2     09:44:06 #>    exittime entrancefeedweight exitfeedweight weight       date     n seq_days #>      <char>              <num>          <num>  <num>     <Date> <int>    <int> #> 1: 07:57:38                341            341      0 2023-12-20   466        2 #> 2: 08:01:35                341            341      0 2023-12-20   466        2 #> 3: 08:26:30                552            535  44200 2023-12-20   466        2 #> 4: 09:09:21                605            294  44600 2023-12-20   466        2 #> 5: 09:35:59                662            369  44400 2023-12-20   466        2 #> 6: 09:44:12                369            367      0 2023-12-20   466        2 #>    seq_in_day seq_in_location #>         <int>           <int> #> 1:          1               1 #> 2:          2               2 #> 3:          3               3 #> 4:          4               4 #> 5:          5               5 #> 6:          6               6"}]
